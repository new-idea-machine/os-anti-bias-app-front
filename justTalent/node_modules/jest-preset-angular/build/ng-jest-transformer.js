"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _NgJestTransformer_ngJestLogger;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NgJestTransformer = void 0;
const bs_logger_1 = require("bs-logger");
const esbuild_1 = require("esbuild");
const ts_jest_1 = require("ts-jest");
const ng_jest_compiler_1 = require("./compiler/ng-jest-compiler");
const ng_jest_config_1 = require("./config/ng-jest-config");
class NgJestTransformer extends ts_jest_1.TsJestTransformer {
    constructor(tsJestConfig) {
        var _a;
        super(tsJestConfig);
        _NgJestTransformer_ngJestLogger.set(this, void 0);
        __classPrivateFieldSet(this, _NgJestTransformer_ngJestLogger, (0, bs_logger_1.createLogger)({
            context: {
                [bs_logger_1.LogContexts.package]: 'jest-preset-angular',
                [bs_logger_1.LogContexts.logLevel]: bs_logger_1.LogLevels.trace,
                version: require('../package.json').version,
            },
            targets: (_a = process.env.NG_JEST_LOG) !== null && _a !== void 0 ? _a : undefined,
        }), "f");
    }
    _createConfigSet(config) {
        return new ng_jest_config_1.NgJestConfig(config);
    }
    _createCompiler(configSet, cacheFS) {
        this._compiler = new ng_jest_compiler_1.NgJestCompiler(configSet, cacheFS);
    }
    process(fileContent, filePath, transformOptions) {
        const configSet = super._configsFor(transformOptions);
        if (configSet.processWithEsbuild(filePath)) {
            __classPrivateFieldGet(this, _NgJestTransformer_ngJestLogger, "f").debug({ filePath }, 'process with esbuild');
            const compilerOpts = configSet.parsedTsConfig.options;
            const { code, map } = (0, esbuild_1.transformSync)(fileContent, {
                loader: 'js',
                format: transformOptions.supportsStaticESM && configSet.useESM ? 'esm' : 'cjs',
                target: compilerOpts.target === configSet.compilerModule.ScriptTarget.ES2015 ? 'es2015' : 'es2016',
                sourcemap: compilerOpts.sourceMap,
                sourcefile: filePath,
                sourcesContent: true,
                sourceRoot: compilerOpts.sourceRoot,
            });
            return {
                code,
                map,
            };
        }
        else {
            return super.process(fileContent, filePath, transformOptions);
        }
    }
}
exports.NgJestTransformer = NgJestTransformer;
_NgJestTransformer_ngJestLogger = new WeakMap();
